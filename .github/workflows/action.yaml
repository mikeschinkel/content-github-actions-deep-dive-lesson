
name: Test Set Vars

on:
  workflow_dispatch:
    inputs:
      vcenter_server:
        type: choice
        description: 'vCenter Server to run OVA build on'
        required: true
        default: 10.174.8.106
        options:
          - 10.174.8.106
          - 10.174.8.38

      vm_size:
        type: choice
        description: 'Size of OVA to build'
        required: true
        default: small
        options:
          - mini
          - small
          - medium
          - large

      start_from:
        type: choice
        description: 'Step to start build FROM (inclusive)'
        required: false
        default: k8s
        options:
          - setup
          - start
          - clean
          - k8s
          - tools
          - iso
          - upload
          - install
          - export

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      concurrency_key: ${{ steps.get_key.outputs.concurrency_key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        if: success()
      - name: Get Key
        id: get_key
        uses: ./.github/actions/concurrency-key
        with:
          vcenter_server: ${{ github.event.inputs.vcenter_server }}


  build:
    runs-on: ubuntu-latest
    needs: init
    env:
      start_from: ${{ github.event.inputs.start_from }}
      ran: ""
    steps:
      - id: setup
        if: github.action == env.start_from
        name: Setup
        run: |
          echo "ran=${{github.action}}" >> $GITHUB_ENV
          echo "setup— ${{ env.ran }} — ${{ env.start_from }}"

      - id: start
        if: github.action==env.start_from || contains(env.start_from,env.ran)
        name: start
        run: |
          echo "ran=${{github.action}} ${{env.ran}}" >> $GITHUB_ENV
          echo "start— ${{ env.ran }} — ${{ env.start_from  }} "

      - id: clean
        if: github.action==env.start_from || contains(env.start_from,env.ran)
        name: clean
        run: |
          echo "ran=${{github.action}} ${{env.ran}}" >> $GITHUB_ENV
          echo "clean— ${{ env.ran }} — ${{ env.start_from  }} "

      - id: k8s
        if: github.action==env.start_from || contains(env.start_from,env.ran)
        name: k8s
        run: |
          echo "ran=${{github.action}} ${{env.ran}}" >> $GITHUB_ENV
          echo "k8s— ${{ env.ran }} — ${{ env.start_from  }} "

      - id: tools
        if: github.action==env.start_from || contains(env.start_from,env.ran)
        name: tools
        run: |
          echo "ran=${{github.action}} ${{env.ran}}" >> $GITHUB_ENV
          echo "tools— ${{ env.ran }} — ${{ env.start_from  }} "

      - id: iso
        if: github.action==env.start_from || contains(env.start_from,env.ran)
        name: iso
        run: |
          echo "ran=${{github.action}} ${{env.ran}}" >> $GITHUB_ENV
          echo "iso— ${{ env.ran }} — ${{ env.start_from  }} "

      - id: upload
        if: github.action==env.start_from || contains(env.start_from,env.ran)
        name: upload
        run: |
          echo "ran=${{github.action}} ${{env.ran}}" >> $GITHUB_ENV
          echo "upload— ${{ env.ran }} — ${{ env.start_from  }} "

      - id: install
        if: github.action==env.start_from || contains(env.start_from,env.ran)
        name: install
        run: |
          echo "ran=${{github.action}} ${{env.ran}}" >> $GITHUB_ENV
          echo "install— ${{ env.ran }} — ${{ env.start_from  }} "

      - id: export
        if: github.action==env.start_from || contains(env.start_from,env.ran)
        name: export
        run: |
          echo "ran=${{github.action}} ${{env.ran}}" >> $GITHUB_ENV
          echo "export— ${{ env.ran }} — ${{ env.start_from  }} "


#  build:
#    runs-on: ubuntu-latest
#    needs: init
#    concurrency:
#      group: ${{ needs.init.outputs.concurrency_key }}"
#      cancel-in-progress: true
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#      - name: Set Environment Variables
#        uses: ./.github/actions/set-vars
#        with:
#          vcenter_server: ${{ github.event.inputs.vcenter_server }}
#          vm_size: ${{ github.event.inputs.vm_size }}
#        id: set_vars
#      - name: Show Vars
#        run: |
#          echo "CONCURRENCY_KEY:  ${{ needs.init.outputs.concurrency_key }}"
#          echo "VCENTER_SERVER:   ${{ env.VCENTER_SERVER }}"
#          echo "VCENTER_USERNAME: ${{ env.VCENTER_USERNAME }}"
#          echo "VCENTER_PASSWORD: ${{ env.VCENTER_PASSWORD }}"
#          echo "VM_SIZE:          ${{ env.VM_SIZE }}"
#
#

